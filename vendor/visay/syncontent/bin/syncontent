#!/bin/bash

# Set static variables
ROOT_DIR=`pwd`
DIR_NAME=$(dirname "$0")
FILE_NAME=$(basename "$0")
BINARY=`readlink ${ROOT_DIR}/${DIR_NAME}/${FILE_NAME} -f`
BIN_PATH=${BINARY%/*}

if [[ "${BIN_PATH}" == ../* ]]; then
	# This is a workaround for mac user to resolve correct link
	cd ${ROOT_DIR}/${DIR_NAME}/${BIN_PATH}
	BIN_PATH=`pwd`
	cd ${ROOT_DIR}
fi

PACKAGE_DIR=${BIN_PATH%/*}

# Colors
RED="\033[0;31m"
GREEN="\033[0;32m"
BROWN="\033[0;33m"
WHITE="\033[0;37m"
NC="\033[0m"

echo

# Detect framework environment
if (cat ${ROOT_DIR}/composer.lock | grep "dockerflow" > /dev/null); then
	FRAMEWORK="flow"
	DATA_DIR="Data/Persistent"

	# Use Development context if Flow Context is not set
	FRAMEWORK_CONTEXT=${FLOW_CONTEXT:=Development}
fi
if (cat ${ROOT_DIR}/composer.lock | grep "dockertypo3" > /dev/null); then
	FRAMEWORK="typo3"
	DATA_DIR="uploads"

	# Use Development context if TYPO3 Context is not set
	FRAMEWORK_CONTEXT=${TYPO3_CONTEXT:=Development}
fi
# If framework is not set anywhere, throw error
if [ -z "${FRAMEWORK}" ]; then
	echo -e ${RED}"-> Framework cannot be detected:"${NC}
	echo
	echo -e ${BROWN}"syncontent requires the system to run with shel/dockerflow or visay/dockertypo3"${NC}
	echo
	exit 1
fi

# Read all arguments and parse into variable ${REMOTE_USER}, ${REMOTE_PATH}, ${REMOTE_HOST} and ${REMOTE_PORT}
for ARGS in "$@"
do
	case ${ARGS} in
		-u=*|--remote-user=*)
		REMOTE_USER="${ARGS#*=}"
		shift
		;;
		-p=*|--remote-path=*)
		REMOTE_PATH="${ARGS#*=}"
		shift
		;;
		-h=*|--remote-host=*)
		REMOTE_HOST="${ARGS#*=}"
		shift
		;;
		-P=*|--remote-port=*)
		REMOTE_PORT="${ARGS#*=}"
		shift
		;;
		-t=*|--ansible-tags=*)
		ANSIBLE_TAGS="--tags=${ARGS#*=}"
		shift
		;;
		--remote-php=*)
		REMOTE_PHP="${ARGS#*=}"
		shift
		;;
		--remote-dump=*)
		REMOTE_DUMP="${ARGS#*=}"
		shift
		;;
		--from-cache)
		FROM_CACHE="${ARGS}"
		shift
		;;
		-v*)
		VERBOSE_LEVEL="${ARGS}"
		shift
		;;
		--dry-run)
		DRY_RUN="${ARGS}"
		shift
		;;
	esac
done

# If remote user is not supplied, read configuration from file
if [ -z "${REMOTE_USER}" ]; then
	REMOTE_USER=`ls ${PACKAGE_DIR}/config/master | sort -n | head -1`
fi

# If remote user is not set anywhere, throw error
if [ -z "${REMOTE_USER}" ]; then
	echo -e ${RED}"-> Please specify the user of the remote server to sync from:"${NC}
	echo
	echo -e ${BROWN}"Example: ${DIR_NAME}/${FILE_NAME} --remote-user=latest-014-007"${NC}
	echo -e ${BROWN}"Example: ${DIR_NAME}/${FILE_NAME} -u=demo-014-007"${NC}
	echo
	echo -e ${BROWN}"Or specify it in config/master directory, read the doc"${NC}
	echo
	exit 1
fi

# Extract from the remote user to get the stage name
MASTER_FILE="${PACKAGE_DIR}/config/master/${REMOTE_USER}"

# If remote host is not set, read it from config file
if [ -z "${REMOTE_HOST}" ]; then
	if [ -f "${MASTER_FILE}" ]; then
		IFS=$'\n'
		for LINE in `cat ${MASTER_FILE}`
		do
			LINE=${LINE//[[:blank:]]/}
			case ${LINE} in
				-h=*|--remote-host=*)
				REMOTE_HOST="${LINE#*=}"
				shift
				;;
			esac
		done
	fi
fi

# If remote port is not set, read it from config file
if [ -z "${REMOTE_PORT}" ]; then
	if [ -f "${MASTER_FILE}" ]; then
		IFS=$'\n'
		for LINE in `cat ${MASTER_FILE}`
		do
			LINE=${LINE//[[:blank:]]/}
			case ${LINE} in
				-P=*|--remote-port=*)
				REMOTE_PORT="${LINE#*=}"
				shift
				;;
			esac
		done
	fi
fi

# If remote host cannot be found anywhere, fallback to default web server
if [ -z "${REMOTE_HOST}" ]; then
	REMOTE_HOST="10.10.10.27"
fi

# If remote port cannot be found anywhere, fallback to default ssh port 22
if [ -z "${REMOTE_PORT}" ]; then
	REMOTE_PORT="22"
fi

# Test connection to the server whether auto login is enabled
PING=`ssh -q -o "BatchMode=yes" ${REMOTE_USER}@${REMOTE_HOST} -p ${REMOTE_PORT} echo "OK"`
if [ "${PING}" != "OK" ]; then
	echo -e ${RED}"-> Public key authentication failed!"${NC}
	echo
	echo -e ${BROWN}"Make sure you have auto login when running: ${WHITE}ssh ${REMOTE_USER}@${REMOTE_HOST} -p ${REMOTE_PORT}"${NC}
	echo
	exit 1
fi

# If remote path is not set in argument, check for it in the configuration file
if [ -z "${REMOTE_PATH}" ]; then
	if [ -f "${MASTER_FILE}" ]; then
		IFS=$'\n'
		for LINE in `cat ${MASTER_FILE}`
		do
			LINE=${LINE//[[:blank:]]/}
			case ${LINE} in
				-p=*|--remote-path=*)
				REMOTE_PATH="${LINE#*=}"
				shift
				;;
			esac
		done
	fi
fi

# If remote path is not defined anywhere, set a standard value
if [ -z "${REMOTE_PATH}" ]; then
	REMOTE_PATH="/home/${REMOTE_USER}/public_html"
fi

# If remote php is not set in argument, check for it in the configuration file
if [ -z "${REMOTE_PHP}" ]; then
	if [ -f "${MASTER_FILE}" ]; then
		IFS=$'\n'
		for LINE in `cat ${MASTER_FILE}`
		do
			LINE=${LINE//[[:blank:]]/}
			case ${LINE} in
				--remote-php=*)
				REMOTE_PHP="${LINE#*=}"
				shift
				;;
			esac
		done
	fi
fi

if [ "${FRAMEWORK}" == "flow" ]; then
	REMOTE_DUMP="/tmp"
fi

if [ "${FRAMEWORK}" == "typo3" ]; then
	if [ -z "${REMOTE_DUMP}" ]; then
		if [ -f "${MASTER_FILE}" ]; then
			IFS=$'\n'
			for LINE in `cat ${MASTER_FILE}`
			do
				LINE=${LINE//[[:blank:]]/}
				case ${LINE} in
					--remote-dump=*)
					REMOTE_DUMP="${LINE#*=}"
					shift
					;;
				esac
			done
		fi
	fi

	if [ -z "${REMOTE_DUMP}" ]; then
		echo -e ${RED}"-> Please specify the path to sql dump on remote servers:"${NC}
		echo
		echo -e ${BROWN}"Example: ${DIR_NAME}/${FILE_NAME} --remote-dump=/tmp/dump/my-db.sql"${NC}
		echo
		echo -e ${BROWN}"Or specify it in config/master directory, read the doc"${NC}
		echo
		exit 1
	fi

	if (ssh ${REMOTE_USER}@${REMOTE_HOST} -p ${REMOTE_PORT} "[ ! -f ${REMOTE_DUMP} ]"); then
		echo -e ${RED}"-> Please make sure the dump file at ${REMOTE_DUMP} exists on remote server"${NC}
		echo
		exit 1
	fi
fi

# Check if data directory exists at the remote path on the server
if (ssh ${REMOTE_USER}@${REMOTE_HOST} -p ${REMOTE_PORT} "[ ! -d ${REMOTE_PATH}/${DATA_DIR} ]"); then
	echo -e ${RED}"-> Directory '${REMOTE_PATH}/${DATA_DIR}' does not exist on the server running ${FRAMEWORK}"${NC}
	echo
	echo -e ${BROWN}"Check if your '--remote-path' config is set properly"${NC}
	echo
	exit 1
fi

# Create dynamic inventory file
rm -f ${PACKAGE_DIR}/ansible/hosts.ini
sed "s/{{ HOST }}/${REMOTE_HOST}/g;s/{{ PORT }}/${REMOTE_PORT}/g" ${PACKAGE_DIR}/ansible/hosts.ini.template > ${PACKAGE_DIR}/ansible/hosts.ini

# Prepare all parameters for ansible
ANSIBLE_PARAMS="-i ${PACKAGE_DIR}/ansible/hosts.ini ${PACKAGE_DIR}/ansible/playbook.yml"
if [ -n "${VERBOSE_LEVEL}" ]; then
	ANSIBLE_PARAMS="${ANSIBLE_PARAMS} $VERBOSE_LEVEL"
fi
if [ -n "${ANSIBLE_TAGS}" ]; then
	ANSIBLE_PARAMS="${ANSIBLE_PARAMS} ${ANSIBLE_TAGS}"
fi

# Prepare all parameters for ansible extra vars
ANSIBLE_EXTRA_VARS="stage=remote ssh_user=${REMOTE_USER} local_path=${ROOT_DIR} remote_path=${REMOTE_PATH} bin_path=${DIR_NAME} remote_dump=${REMOTE_DUMP} local_context=${FRAMEWORK_CONTEXT} framework=${FRAMEWORK}"
if [ -n "${REMOTE_PHP}" ]; then
	ANSIBLE_EXTRA_VARS="${ANSIBLE_EXTRA_VARS} remote_php=${REMOTE_PHP}"
fi
if [[ -n "${FROM_CACHE}" ]]; then
	ANSIBLE_EXTRA_VARS="${ANSIBLE_EXTRA_VARS} from_cache=yes"
else
	ANSIBLE_EXTRA_VARS="${ANSIBLE_EXTRA_VARS} from_cache=no"
fi

echo -e ${GREEN}"ENVIRONMENT SUMMARY:"${NC}
echo            "======================="
echo -e         "FRAMEWORK: ${GREEN}${FRAMEWORK}${NC}"
echo            "-----------------------"
if [[ -n "${FROM_CACHE}" ]]; then
	echo -e         "FROM:      ${GREEN}Local Caches${NC}"
else
	echo -e         "FROM:      ${GREEN}${REMOTE_USER}${NC}"
	echo -e         "ON:        ${GREEN}${REMOTE_HOST}${NC}"
	echo -e         "CONTEXT:   ${GREEN}Production${NC}"
fi
echo            "-----------------------"
echo -e         "TO:        ${GREEN}Local Docker${NC}"
echo -e         "CONTEXT:   ${GREEN}${FRAMEWORK_CONTEXT}${NC}"
echo            "-----------------------"
echo

if [[ -n "${DRY_RUN}" ]]; then
	echo -e ${GREEN}"DRY RUN MODE:"${NC}
	echo            "============"
	echo
	echo -e ${BROWN}"The following command should be executed"${NC}
	echo "----------------------------------------"
	echo "ansible-playbook ${ANSIBLE_PARAMS} --extra-vars \"${ANSIBLE_EXTRA_VARS}\""
	echo
	exit 0
fi

# Ask user to confirm
read -p "Are you sure (y/n)? " -r
echo
if [[ ! ${REPLY} =~ ^[Yy]$ ]]; then
	echo -e ${BROWN}"#############################"
	echo            "### CONTENT SYNC SKIPPED  ###"
	echo -e         "#############################"${NC}
	exit 0
fi

echo -e ${GREEN}"#############################"
echo            "### STARTING CONTENT SYNC ###"
echo -e         "#############################"${NC}

eval "ansible-playbook ${ANSIBLE_PARAMS} --extra-vars \"${ANSIBLE_EXTRA_VARS}\"" || ERROR="1"

if [[ -n "${ERROR}" ]]; then
	echo
	echo -e ${RED}"-> Ansible argument error"${NC}
	echo
	echo -e ${BROWN}"Please make sure you pass the correct parameters"
	echo -e "Read the documentation for detailed usage"${NC}
	echo
	exit 1
else
	echo -e ${GREEN}"#############################"
	echo            "### CONTENT SYNC COMPLETE ###"
	echo -e         "#############################"${NC}
fi
